{"remainingRequest":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/src/views/Post.vue?vue&type=template&id=66b2084c&scoped=true&","dependencies":[{"path":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/src/views/Post.vue","mtime":1601581789440},{"path":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/cache-loader/dist/cjs.js","mtime":1591384219978},{"path":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":1591384224541},{"path":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/cache-loader/dist/cjs.js","mtime":1591384219978},{"path":"/Users/kempatkinson/Desktop/coding work/ibid/ibid-mobile/ibidmobile-front/node_modules/vue-loader/lib/index.js","mtime":1591384224540}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}