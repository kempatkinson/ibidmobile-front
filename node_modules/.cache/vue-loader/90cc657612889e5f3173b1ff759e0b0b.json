{"remainingRequest":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/kempatkinson/Desktop/ibidmobile2/client/src/views/Home.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/src/views/Home.vue","mtime":1587691069523},{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/css-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/kempatkinson/Desktop/ibidmobile2/client/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCjxzdHlsZSBzY29wZWQ+Ci5jYXJkIHsKICBtYXJnaW4tYm90dG9tOiAxMCU7CiAgYWxpZ24tY29udGVudDogY2VudGVyOwp9CmgzLApwIHsKICBjb2xvcjogYmxhY2s7Cn0KaW1nIHsKICBtYXJnaW46IDUlOwp9CnAgewogIG1hcmdpbi1ib3R0b206IDUlOwp9CgpidXR0b24gewogIHdpZHRoOiA0MCU7CiAgCn0K"},{"version":3,"sources":["Home.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA","file":"Home.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <div id=\"list\" class=\"container\">\n    <div class=\"row\" v-for=\"data in posts\"  :key=\"data.id\">\n      <div class=\"col d-flex justify-content-center\">\n        <router-link :to=\"{ name: 'post', params: {id: data.id}}\">\n          <div class=\"card\" style=\"width: 18rem;\" v-on:click=\"select($event)\" :id=\"data.id\">\n            <br />\n            <h3 class=\"card-title\">{{data.name}}</h3>\n\n            <img class=\"card-image-top\" src=\"../assets/sample.jpg\" />\n            <div class=\"card-body\">\n            <p class=\"card-text\">Current Bid : {{data.price}}</p>\n\n            <button class=\"btn btn-primary\"> Bid Now! </button>\n          </div>\n              </div>\n        </router-link>\n      </div>\n\n    </div>\n  </div>\n</template>\n\n<script>\nconst Swing = require('swing')\n\nexport default {\n  name: 'vue-swing',\n\n  props: ['config'],\n\n  data () {\n    return {\n      stack: null,\n      cards: [],\n      observer: null\n    }\n  },\n\n  mounted () {\n    this.stack = Swing.Stack(this.config || {})\n    let children = Array.prototype.slice.call(this.$el.children)\n    children.forEach(el => {\n      this.cards.push(this.stack.createCard(el))\n    })\n\n    // Observe changes in DOM\n    this.observer = new MutationObserver(mutations => {\n      const addedElements = []\n      const removedElements = []\n      mutations.forEach(({ addedNodes, removedNodes }) => {\n        addedElements.push(...addedNodes)\n        removedElements.push(...removedNodes)\n      })\n\n      // Create a new card for each new element\n      addedElements.forEach(el => {\n        // Ignore if the added element is also removed\n        const i = removedElements.indexOf(el)\n        if (i !== -1) {\n          removedElements.splice(i, 1)\n          return\n        }\n\n        const card = this.stack.getCard(el)\n        if (card == null) {\n          this.cards.push(this.stack.createCard(el))\n        }\n      })\n\n      // Remove the card if the element is gone\n      removedElements.forEach(el => {\n        const card = this.stack.getCard(el)\n        if (card != null) {\n          this.cards.splice(this.cards.indexOf(card), 1)\n          this.stack.destroyCard(card)\n        }\n      })\n    })\n    this.observer.observe(this.$el, { childList: true })\n\n    // Register events\n    const events = [\n      'throwout',\n      'throwoutend',\n      'throwoutdown',\n      'throwoutleft',\n      'throwoutright',\n      'throwoutup',\n      'throwin',\n      'throwinend',\n      'dragstart',\n      'dragmove',\n      'dragend',\n      'destroyCard'\n    ]\n\n    for (let event of events) {\n      this.stack.on(event, e => {\n        this.$emit(event, e)\n      })\n    }\n  },\n\n  beforeDestroy () {\n    this.observer.disconnect()\n  },\n\n  Card: Swing.Card,\n  Direction: Swing.Direction,\n  Stack: Swing.Stack\n}\n</script>\n\n<style>\n<style scoped>\n.card {\n  margin-bottom: 10%;\n  align-content: center;\n}\nh3,\np {\n  color: black;\n}\nimg {\n  margin: 5%;\n}\np {\n  margin-bottom: 5%;\n}\n\nbutton {\n  width: 40%;\n  \n}\n</style>"]}]}